name: "Build and Publish Docker Image"
description: "Build and optionally publish Docker image to GitHub Container Registry"

inputs:
  registry:
    description: "Docker registry URL"
    required: true
    default: "ghcr.io"
  image-name:
    description: "Docker image name"
    required: true
  push:
    description: "Whether to push the image"
    required: true
    default: "false"
  github-token:
    description: "GitHub token for registry authentication"
    required: true
  tags-config:
    description: "Tags configuration for docker/metadata-action"
    required: true
  platforms:
    description: "Target platforms for multi-arch builds"
    required: false
    default: "linux/amd64,linux/arm64"

outputs:
  digest:
    description: "Image digest"
    value: ${{ steps.build.outputs.digest }}
  metadata:
    description: "Build metadata"
    value: ${{ steps.meta.outputs.json }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: inputs.push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: ${{ inputs.tags-config }}
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index


    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Generate artifact attestation
      if: inputs.push == 'true'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ inputs.registry }}/${{ inputs.image-name }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
